function main(r){function t(r){deltaTime=(r*=.001)-c,c=r,mat4.rotateY(rotation,rotation,pos_x/50),mat4.multiply(transform,translation,rotation),drawScene(e,n,a,transform),requestAnimationFrame(t)}const o=document.getElementById("webgl-background-js");o.width=o.clientWidth,o.height=o.clientHeight,document.addEventListener("mousemove",(r=>{pos_x=r.clientX,pos_y=r.clientY;let t=document.body.clientWidth,o=document.body.clientHeight;pos_x=(pos_x-t/2)/(t/2),pos_y=(pos_y-o/2)/(o/2)}));const e=o.getContext("webgl");if(null===e)return;e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT);const i=initShaderProgram(e,"\n    attribute vec4 aVertexPosition;\n    attribute vec3 aBaricentricCoord;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    varying lowp vec3 vBaricentricCoord;\n\n    void main(void) {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n      vBaricentricCoord = aBaricentricCoord;\n    }\n  ","\n    varying lowp vec3 vBaricentricCoord;\n\n    void main(void) {\n      gl_FragColor[0] = float((vBaricentricCoord[0] < 0.01) || (vBaricentricCoord[1] < 0.01) || (vBaricentricCoord[2] < 0.01));\n      gl_FragColor[1] = float((vBaricentricCoord[0] < 0.01) || (vBaricentricCoord[1] < 0.01) || (vBaricentricCoord[2] < 0.01));\n      gl_FragColor[2] = float((vBaricentricCoord[0] < 0.01) || (vBaricentricCoord[1] < 0.01) || (vBaricentricCoord[2] < 0.01));\n      gl_FragColor[3] = float((vBaricentricCoord[0] < 0.01) || (vBaricentricCoord[1] < 0.01) || (vBaricentricCoord[2] < 0.01));\n\n    }\n  "),n={program:i,attribLocations:{vertexPosition:e.getAttribLocation(i,"aVertexPosition"),baricentricPosition:e.getAttribLocation(i,"aBaricentricCoord")},uniformLocations:{projectionMatrix:e.getUniformLocation(i,"uProjectionMatrix"),modelViewMatrix:e.getUniformLocation(i,"uModelViewMatrix")}},a=initBuffers(e,r);let c=0;requestAnimationFrame(t)}function initShaderProgram(r,t,o){const e=loadShader(r,r.VERTEX_SHADER,t),i=loadShader(r,r.FRAGMENT_SHADER,o),n=r.createProgram();return r.attachShader(n,e),r.attachShader(n,i),r.linkProgram(n),r.getProgramParameter(n,r.LINK_STATUS)?n:null}function loadShader(r,t,o){const e=r.createShader(t);return r.shaderSource(e,o),r.compileShader(e),r.getShaderParameter(e,r.COMPILE_STATUS)?e:(r.deleteShader(e),null)}import{initBuffers}from"./init-buffers.js";import{drawScene}from"./draw-scene.js";import"https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js";let deltaTime=0,rotating=!0,rotation=mat4.create(),translation=mat4.create(),transform=mat4.create(),pos_x=0,pos_y=0;fetch("/assets/3Dobjects/jellyfish.obj").then((r=>{if(!r.ok)throw new Error("Network response was not ok");return r.text()})).then((r=>{main(r)}));