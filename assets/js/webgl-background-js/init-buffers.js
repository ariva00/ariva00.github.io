function initBuffers(n){return{position:initPositionBuffer(n),color:initColorBuffer(n),indices:initIndexBuffer(n)}}function initPositionBuffer(n){const r=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,r);const f=[-1,-1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,1,1,1,1,1,1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,1,-1,1,1,-1,1,-1];return n.bufferData(n.ARRAY_BUFFER,new Float32Array(f),n.STATIC_DRAW),r}function initColorBuffer(n){const r=[[1,1,1,1],[1,0,0,1],[0,1,0,1],[0,0,1,1],[1,1,0,1],[1,0,1,1]];for(var f=[],t=0;t<r.length;++t){const n=r[t];f=f.concat(n,n,n,n)}const e=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,e),n.bufferData(n.ARRAY_BUFFER,new Float32Array(f),n.STATIC_DRAW),e}function initIndexBuffer(n){const r=n.createBuffer();n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r);const f=[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23];return n.bufferData(n.ELEMENT_ARRAY_BUFFER,new Uint16Array(f),n.STATIC_DRAW),r}export{initBuffers};